name: cmake-configure

description: Configure the project with CMake

inputs:
  source-directory:     # required
    required: false
    description: ''
    default: '[default]'
  preset-name:          # required
    required: false
    description: ''
    default: '[default]'
  cache-language:       # required
    required: false
    description: ''
    default: '[default]'
  cache-version:        # required
    required: false
    description: ''
    default: '[default]'
  cache-update-mode:    # required
    required: false
    description: ''
    default: '[default]'
  cache-install-mode:   # required
    required: false
    description: ''
    default: '[default]'
  cache-auto-depend:
    required: false
    description: ''
    default: '[default]'
  cache-remove-redundant:
    required: false
    description: ''
    default: '[default]'
  cache-compend-version:
    required: false
    description: ''
    default: '[default]'
  cache-exact-version-git:
    required: false
    description: ''
    default: '[default]'
  cache-exact-version-python:
    required: false
    description: ''
    default: '[default]'
  cache-exact-version-gettext:
    required: false
    description: ''
    default: '[default]'
  cache-exact-version-crowdin:
    required: false
    description: ''
    default: '[default]'
  cache-gettext-wrap-width:
    required: false
    description: ''
    default: '[default]'
  cache-gettext-additional-targets:
    required: false
    description: ''
    default: '[default]'
  cache-sphinx-builder:
    required: false
    description: ''
    default: '[default]'
  cache-sphinx-console-locale:
    required: false
    description: ''
    default: '[default]'
  cache-sphinx-verbose-level:
    required: false
    description: ''
    default: '[default]'
  cache-sphinx-job-number:
    required: false
    description: ''
    default: '[default]'

runs:
  using: composite
  steps:
    # - name: Print All Inputs JSON
    #   shell: bash
    #   run: |
    #     echo '[Inputs]'
    #     echo '${{ toJSON(inputs) }}'
    #     echo '[GitHub]'
    #     echo '${{ toJSON(github) }}'

    - name: Configure with '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
      shell: bash
      # run: |
      #   cmake \
      #     --preset ${{ inputs.LANGUAGE }} \
      #     -D VERSION=${{ inputs.VERSION }} \
      #     -D UPDATE_MODE=${{ inputs.UPDATE_MODE }} \
      #     -D AUTO_DEPEND=OFF
      # run: |
      #   # cmake_args=()
      #   for var in $(echo '${{ fromJSON(inputs) }}' | jq -r 'keys[]'); do
      #     echo "var: $var"
      #   done
      run: |
        echo "${{ toJSON(inputs) }}" | jq -c
        # inputs_compact=$(echo "${{ toJSON(inputs) }}" | jq -c)
        # echo 'inputs_compact:'
        # echo '$inputs_compact'
        # inputs_keys=$(echo "$inputs_compact" | jq -r 'keys[]')
        # echo 'inputs_keys:'
        # echo '$inputs_keys'

        # for key in $inputs_keys; do
        #   echo "key: $key"
        #   # value=$(echo '$inputs_compact' | jq -r '.$key')
        #   # echo 'value: $value'

        #   # if [ "$value" != "[default]" ]; then
        #   #   # Convert cache-xxx-yyy to -DXXX=yyy format
        #   #   # cmake_args+=("-D$(echo "$key" | sed 's/^cache-//'):${value}")
        #   #   # cmake_args+=("-D$(echo "$key" | sed 's/^cache-\(.*\)/\U\1/' | sed 's/-/_/g'):${value}")
        #   #   # echo "-D$(echo "$key" | sed 's/^cache-\(.*\)/\U\1/')"
        #   #   # echo "-D$(echo "$key" | sed 's/^cache-\(.*\)/\U\1/' | sed 's/-/_/g'):${value}"
        #   # fi
        # done
      # run: |
      #     delimiter="$(openssl rand -hex 8)"
      #     echo 'inputs_compact<<$delimiter'     >> $GITHUB_ENV
      #     echo '${{ toJSON(inputs) }}' | jq -c  >> $GITHUB_ENV
      #     echo '$delimiter'                     >> $GITHUB_ENV
      #     echo 'inpus_compact:'
      #     echo '${{ env.inpus_compact }}'
      # run: |
      #   echo '${{ toJSON(inputs) }}' | jq -c
      #   # # Run cmake with constructed arguments
      #   # echo "cmake ${cmake_args[@]}"
      # run: |
      #   echo '${{ toJSON(inputs) }}' | jq -c
