name: cmake-configure

description: Configure the project with CMake

inputs:
  source-directory:     # required
    required: true
    description: ''
  language:             # required
    required: true
    description: 'Value passed to LANGUAGE cache (Configure Preset Name).'
  version:              # required
    required: true
    description: 'Value passed to VERSION cache.'
  cache-update-mode:
    required: false
    description: 'Value passed to UPDATE_MODE cache.'
    default: '[default]'
  cache-install-mode:
    required: false
    description: 'Value passed to INSTALL_MODE cache.'
    default: '[default]'
  cache-auto-depend:
    required: false
    description: 'Value passed to AUTO_DEPEND cache.'
    default: '[default]'
  cache-remove-redundant:
    required: false
    description: 'Value passed to REMOVE_REDUNDANT cache.'
    default: '[default]'
  cache-compend-version:
    required: false
    description: 'Value passed to COMPEND_VERSION cache.'
    default: '[default]'
  cache-git-exact-version:
    required: false
    description: 'Value passed to GIT_EXACT_VERSION cache.'
    default: '[default]'
  cache-python-exact-version:
    required: false
    description: 'Value passed to PYTHON_EXACT_VERSION cache.'
    default: '[default]'
  cache-gettext-exact-version:
    required: false
    description: 'Value passed to GETTEXT_EXACT_VERSION cache.'
    default: '[default]'
  cache-crowdin-exact-version:
    required: false
    description: 'Value passed to CROWDIN_EXACT_VERSION cache.'
    default: '[default]'
  cache-gettext-wrap-width:
    required: false
    description: 'Value passed to GETTEXT_WRAP_WIDTH cache.'
    default: '[default]'
  cache-gettext-additional-targets:
    required: false
    description: 'Value passed to GETTEXT_ADDITIONAL_TARGETS cache.'
    default: '[default]'
  cache-sphinx-builder:
    required: false
    description: 'Value passed to SPHINX_BUILDER cache.'
    default: '[default]'
  cache-sphinx-console-locale:
    required: false
    description: 'Value passed to SPHINX_CONSOLE_LOCALE cache.'
    default: '[default]'
  cache-sphinx-verbose-level:
    required: false
    description: 'Value passed to SPHINX_VERBOSE_LEVEL cache.'
    default: '[default]'
  cache-sphinx-job-number:
    required: false
    description: 'Value passed to GETTEXT_JOB_NUMBER cache.'
    default: '[default]'

runs:
  using: composite
  steps:
    - name: Get CMAKE_ARGS by Inputs
      shell: bash
      id: cmake-args
      run: |
        INPUTS_JSON=$(echo '${{ toJSON(inputs) }}' | jq -c)
        INPUTS_KEYS=$(echo "$INPUTS_JSON" | jq -r 'keys[]')
        CMAKE_ARGS=()
        for KEY in $INPUTS_KEYS; do
          # Remove the possible newline in KEY by tr. (for Windows Bash)
          KEY=$(echo "${KEY}" | tr -d '\r\n')
          VALUE=$(echo "$INPUTS_JSON" | jq -r --arg key "${KEY}" '.[$key]')
          CMAKE_ARG=""
          if [[ "${KEY}" == "source-directory" ]]; then
            CMAKE_ARG="-S=${VALUE}"
          elif [[ "${KEY}" == "language" ]]; then
            CMAKE_ARG="--preset=${VALUE}"
          elif [[ "${KEY}" == "version" ]]; then
            CMAKE_ARG="-DVERSION=${VALUE}"
          elif [[ "${KEY}" =~ ^cache- ]]; then
            if [[ "${VALUE}" != "[default]" ]]; then
              # Convert lowercase to uppercase by tr since BSD-sed cannot support '\U'. (for macOS bash)
              CACHE_NAME=$(echo "${KEY}" | sed 's/^cache-//' | tr '[:lower:]' '[:upper:]' | sed 's/-/_/g')
              CACHE_VALUE=${VALUE}
              CMAKE_ARG="-D${CACHE_NAME}=${CACHE_VALUE}"
            fi
          fi
          CMAKE_ARGS+=($CMAKE_ARG)
        done
        echo "CMAKE_ARGS=${CMAKE_ARGS[@]}" >> $GITHUB_OUTPUT

    - name: Configure the project (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: cmd
      run: |
        set CMAKE_ARGS=${{ steps.cmake-args.outputs.CMAKE_ARGS }}
        echo configuring the project...
        echo.
        echo cmake %CMAKE_ARGS%
        echo.
        cmake %CMAKE_ARGS%

    - name: Configure the project (Linux/macOS)
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      shell: bash
      run: |
        CMAKE_ARGS="${{ steps.cmake-args.outputs.CMAKE_ARGS }}"
        echo "configuring the project..."
        echo ""
        echo "cmake ${CMAKE_ARGS[@]}"
        echo ""
        cmake ${CMAKE_ARGS[@]}
