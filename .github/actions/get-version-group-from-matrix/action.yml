# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-version-group-from-matrix

description: Get the Version Group from matrix.json

inputs:
  version:
    required: true
    description: xxx
  matrix-file:
    required: true
    description: xxx
  workspace:
    required: false
    description: xxx
    default: '${{ github.workspace }}'

outputs:
  VERSION_GROUP:
    value: ${{ steps.gcvm.outputs.VERSION_GROUP }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Get the Version Group from matrix.json
      id: gcvm
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        MATRIX_FILE=$(echo "${{ inputs.matrix-file }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')
        WORKSPACE=$(echo "${{ inputs.workspace }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd ${WORKSPACE}

        VERSION_GROUPS=($(jq -r 'keys[]' "${MATRIX_FILE}" | tr -d '\r'))
        FOUND_GROUP=""
        for VERSION_GROUP in ${VERSION_GROUPS[@]}; do
          FILTER="[.${VERSION_GROUP}[] | select(.VERSION == \"${VERSION}\")] | length"
          IS_IN_GROUP=$(jq "${FILTER}" "${MATRIX_FILE}" | tr -d '\r')
          if [ "$IS_IN_GROUP" -gt 0 ]; then
            FOUND_GROUP="${VERSION_GROUP}"
            break
          fi
        done

        if [ -n "${FOUND_GROUP}" ]; then
          echo "${VERSION} is in ${FOUND_GROUP}"
        else
          echo "${VERSION} is not found in any group"
        fi

        echo "VERSION_GROUP=${FOUND_GROUP}" >> ${GITHUB_OUTPUT}
