# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-cache-versions-from-matrix

description: Get Cache Versions from matrix.json

inputs:
  version:
    required: true
    description: xxx
  matrix-file:
    required: true
    description: xxx
  matrix-group:
    required: true
    description: xxx

outputs:
  VERSION_COMPENDIUM:
    value: ${{ steps.gcvm.outputs.VERSION_COMPENDIUM }}
    description: xxx
  VERSION_EXACT_GIT:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_GIT }}
    description: xxx
  VERSION_EXACT_CONDA:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_CONDA }}
    description: xxx
  VERSION_EXACT_GETTEXT:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_GETTEXT }}
    description: xxx
  VERSION_EXACT_CROWDIN:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_CROWDIN }}
    description: xxx
  VERSION_EXACT_PYTHON:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_PYTHON }}
    description: xxx
  VERSION_EXACT_SPHINX:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_SPHINX }}
    description: xxx
  VERSION_EXACT_PROJ:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_PROJ }}
    description: xxx
  VERSION_EXACT_DOXYGEN:
    value: ${{ steps.gcvm.outputs.VERSION_EXACT_DOXYGEN }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Get Cache Versions from matrix.json
      id: gcvm
      shell: bash
      run: |
        cd ${{ github.workspace }}

        VERSION="${{ inputs.version }}"
        MATRIX_FILE="${{ inputs.matrix-file }}"
        MATRIX_GROUP="${{ inputs.matrix-group }}"
          
        # Predefine default values for all output variables
        CACHE_VERSIONS=(
          "VERSION_COMPENDIUM"
          "VERSION_EXACT_GIT"
          "VERSION_EXACT_CONDA"
          "VERSION_EXACT_GETTEXT"
          "VERSION_EXACT_CROWDIN"
          "VERSION_EXACT_PYTHON"
          "VERSION_EXACT_SPHINX"
          "VERSION_EXACT_DOXYGEN"
          "VERSION_EXACT_PROJ"
        )

        # Initialize all variables with the default value
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "${CACHE_VERSION}='[default]'"
        done

        # Read actual values from matrix.json
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          FILTER=".${MATRIX_GROUP}[] | select(.VERSION == \"${VERSION}\") | .${CACHE_VERSION}"
          VALUE=$(jq -r "${FILTER}" "${MATRIX_FILE}")
          if [ "${VALUE}" != "null" ]; then
            eval "${CACHE_VERSION}='${VALUE}'"
          fi
        done

        # Set GitHub Actions outputs
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "echo ${CACHE_VERSION}: \$$CACHE_VERSION"
          eval "echo ${CACHE_VERSION}=\$${CACHE_VERSION} >> ${GITHUB_OUTPUT}"
        done
