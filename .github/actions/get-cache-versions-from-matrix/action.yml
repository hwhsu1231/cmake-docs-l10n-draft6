# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-cache-versions-from-matrix

description: Get Cache Versions from matrix.json

inputs:
  version:
    required: true
    description: xxx
#   matrix-file:
#     required: true
#     description: xxx
#   matrix-group:
#     required: true
#     description: xxx

outputs:
  VERSION_COMPENDIUM:
    value: ${{ steps.slago.outputs.VERSION_COMPENDIUM }}
    description: xxx
  VERSION_EXACT_GIT:
    value: ${{ steps.slago.outputs.VERSION_EXACT_GIT }}
    description: xxx
  VERSION_EXACT_CONDA:
    value: ${{ steps.slago.outputs.VERSION_EXACT_CONDA }}
    description: xxx
  VERSION_EXACT_GETTEXT:
    value: ${{ steps.slago.outputs.VERSION_EXACT_GETTEXT }}
    description: xxx
  VERSION_EXACT_CROWDIN:
    value: ${{ steps.slago.outputs.VERSION_EXACT_CROWDIN }}
    description: xxx
  VERSION_EXACT_PYTHON:
    value: ${{ steps.slago.outputs.VERSION_EXACT_PYTHON }}
    description: xxx
  VERSION_EXACT_PROJ:
    value: ${{ steps.slago.outputs.VERSION_EXACT_CROWDIN }}
    description: xxx
  VERSION_EXACT_DOXYGEN:
    value: ${{ steps.slago.outputs.VERSION_EXACT_CROWDIN }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Set the Crowdin Language Arguments
      id: slago
      shell: bash
      run: |
        bash --version

        MATRIX=".github/workflows/matrix.json"
        VERSION_INPUT="${{ inputs.version }}"
        
        declare -A CACHE_VERSIONS_DEFAULT=(
          [VERSION_COMPENDIUM]='[default]'
          [VERSION_EXACT_GIT]='[default]'
          [VERSION_EXACT_CONDA]='[default]'
          [VERSION_EXACT_GETTEXT]='[default]'
          [VERSION_EXACT_PYTHON]='[default]'
          [VERSION_EXACT_CROWDIN]='[default]'
        )

        for KEY in "${!CACHE_VERSIONS_DEFAULT[@]}"; do
          VALUE=$(jq -r ".include[] | select(.VERSION == \"${VERSION_INPUT}\") | .${KEY}" "${MATRIX}")
          if [ "$VALUE" != "null" ] && [ -n "$VALUE" ]; then
            CACHE_VERSIONS_DEFAULT[$KEY]=$VALUE
          fi
        done

        for CACHE_VERSION in "${!CACHE_VERSIONS_DEFAULT[@]}"; do
          echo "${CACHE_VERSION}: ${CACHE_VERSIONS_DEFAULT[$CACHE_VERSION]}"
        done

        for CACHE_VERSION in "${!CACHE_VERSIONS_DEFAULT[@]}"; do
          echo "${CACHE_VERSION}=${CACHE_VERSIONS_DEFAULT[$CACHE_VERSION]}" >> ${GITHUB_OUTPUT}
          # echo "::set-output name=${CACHE_VERSION}::${CACHE_VERSIONS_DEFAULT[$CACHE_VERSION]}"
        done


        # bash --version
        # MATRIX=".github/workflows/matrix.json"
        # KEYS=$(jq -r ".include[0] | keys[] | select(. != \"VERSION\")" "${MATRIX}" | tr -d '\r')
        # declare -A KEY_FILTERS
        # for KEY in ${KEYS[@]}; do
        #   KEY_FILTERS[${KEY}]=".include[] | select(.VERSION == \"${{ inputs.version }}\") | .${KEY}"
        # done
        # CACHE_VERSIONS=()
        # CACHE_VERSIONS[0]="VERSION_COMPENDIUM"
        # CACHE_VERSIONS[1]="VERSION_EXACT_GIT"
        # CACHE_VERSIONS[2]="VERSION_EXACT_CONDA"
        # CACHE_VERSIONS[3]="VERSION_EXACT_GETTEXT"
        # CACHE_VERSIONS[4]="VERSION_EXACT_PYTHON"
        # CACHE_VERSIONS[5]="VERSION_EXACT_CROWDIN"
        # for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
        #   eval "${CACHE_VERSION}=[default]"
        # done
        # for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
        #   eval "echo ${CACHE_VERSION}: \$$CACHE_VERSION"
        # done
        # VERSION_COMPENDIUM="[default]"
        # VERSION_EXACT_GIT="[default]"
        # VERSION_EXACT_CONDA="[default]"
        # VERSION_EXACT_GETTEXT="[default]"
        # VERSION_EXACT_PYTHON="[default]"
        # VERSION_EXACT_CROWDIN="[default]"
        # # for KEY in ${KEYS[@]}; do
        # for KEY in ${!KEY_FILTERS[@]}; do
        #   FILTER="${KEY_FILTERS[${KEY}]}"
        #   VALUE=$(jq -r "${FILTER}" "${MATRIX}" | tr -d '\r')
        #   echo "KEY:    ${KEY}"
        #   echo "VALUE:  ${VALUE}"
        # done
        
        # declare -A KEY_FILTERS
        # for KEY in ${KEYS[@]}; do
        #   KEY_FILTERS[${KEY}]=".include[] | select(.VERSION == \"${{ inputs.VERSION }}\") | .${KEY}"
        # done
        # for KEY in ${!KEY_FILTERS[@]}; do
        #   FILTER="${KEY_FILTERS[${KEY}]}"
        #   VALUE=$(jq -r "${FILTER}" "${MATRIX}" | tr -d '\r')
        #   if [ "${VALUE}" = "null" ]; then VALUE=""; fi
        #   echo "${KEY}=${VALUE}" >> ${GITHUB_OUTPUT}
        #   echo "${KEY}: ${VALUE}"
        # done

      # run: |
      #   MATRIX=".github/workflows/matrix.json"
      #   KEYS=$(jq -r ".include[0] | keys[] | select(. != \"VERSION\")" "${MATRIX}" | tr -d '\r')
      #   declare -A KEY_FILTERS
      #   for KEY in ${KEYS[@]}; do
      #     KEY_FILTERS[${KEY}]=".include[] | select(.VERSION == \"${{ inputs.VERSION }}\") | .${KEY}"
      #   done
      #   for KEY in ${!KEY_FILTERS[@]}; do
      #     FILTER="${KEY_FILTERS[${KEY}]}"
      #     VALUE=$(jq -r "${FILTER}" "${MATRIX}" | tr -d '\r')
      #     if [ "${VALUE}" = "null" ]; then VALUE=""; fi
      #     echo "${KEY}=${VALUE}" >> ${GITHUB_OUTPUT}
      #     echo "${KEY}: ${VALUE}"
      #   done
