# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-cache-versions-from-matrix

description: Get Cache Versions from versions.json

inputs:
  version:
    required: true
    description: xxx
  version-group:
    required: true
    description: xxx
  matrix-file:
    required: true
    description: xxx
  workspace:
    required: false
    description: xxx
    default: '${{ github.workspace }}'

outputs:
  VERSION_COMPENDIUM:
    value: ${{ steps.gcvm.outputs.VERSION_COMPENDIUM }}
    description: xxx
  VERSION_OF_GIT:
    value: ${{ steps.gcvm.outputs.VERSION_OF_GIT }}
    description: xxx
  VERSION_OF_CONDA:
    value: ${{ steps.gcvm.outputs.VERSION_OF_CONDA }}
    description: xxx
  VERSION_OF_GETTEXT:
    value: ${{ steps.gcvm.outputs.VERSION_OF_GETTEXT }}
    description: xxx
  VERSION_OF_CROWDIN:
    value: ${{ steps.gcvm.outputs.VERSION_OF_CROWDIN }}
    description: xxx
  VERSION_OF_PYTHON:
    value: ${{ steps.gcvm.outputs.VERSION_OF_PYTHON }}
    description: xxx
  VERSION_OF_SPHINX:
    value: ${{ steps.gcvm.outputs.VERSION_OF_SPHINX }}
    description: xxx
  VERSION_OF_DOXYGEN:
    value: ${{ steps.gcvm.outputs.VERSION_OF_DOXYGEN }}
    description: xxx
  VERSION_OF_PROJ:
    value: ${{ steps.gcvm.outputs.VERSION_OF_PROJ }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Get Cache Versions from versions.json
      id: gcvm
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        VERSION_GROUP="${{ inputs.version-group }}"
        MATRIX_FILE=$(echo "${{ inputs.matrix-file }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')
        WORKSPACE=$(echo "${{ inputs.workspace }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd ${WORKSPACE}

        CACHE_VERSIONS=(
          "VERSION_COMPENDIUM"
          "VERSION_OF_GIT"
          "VERSION_OF_CONDA"
          "VERSION_OF_GETTEXT"
          "VERSION_OF_CROWDIN"
          "VERSION_OF_PYTHON"
          "VERSION_OF_SPHINX"
          "VERSION_OF_DOXYGEN"
          "VERSION_OF_PROJ"
        )

        # Initialize all output variables with the default value
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "${CACHE_VERSION}='[default]'"
        done

        # Read actual values from versions.json
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          FILTER=".${VERSION_GROUP}[] | select(.VERSION == \"${VERSION}\") | .${CACHE_VERSION}"
          VALUE=$(jq -r "${FILTER}" "${MATRIX_FILE}")
          if [ "${VALUE}" != "null" ]; then
            eval "${CACHE_VERSION}='${VALUE}'"
          fi
        done

        # Set GitHub Actions outputs
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "echo ${CACHE_VERSION}: \$$CACHE_VERSION"
          eval "echo ${CACHE_VERSION}=\$${CACHE_VERSION} >> ${GITHUB_OUTPUT}"
        done
