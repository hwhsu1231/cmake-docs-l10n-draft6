# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-cache-versions-from-matrix

description: Get Cache Versions from matrix.json

# inputs:
#   matrix-file:
#     required: true
#     description: xxx
#   matrix-group:
#     required: true
#     description: xxx

outputs:
  VERSION_EXACT_GIT:
    value: ${{ steps.slago.outputs.VERSION_EXACT_GIT }}
    description: xxx
  VERSION_EXACT_CONDA:
    value: ${{ steps.slago.outputs.VERSION_EXACT_CONDA }}
    description: xxx
  VERSION_EXACT_GETTEXT:
    value: ${{ steps.slago.outputs.VERSION_EXACT_GETTEXT }}
    description: xxx
  VERSION_EXACT_PYTHON:
    value: ${{ steps.slago.outputs.VERSION_EXACT_PYTHON }}
    description: xxx
  VERSION_EXACT_CROWDIN:
    value: ${{ steps.slago.outputs.VERSION_EXACT_CROWDIN }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Set the Crowdin Language Arguments
      id: slago
      shell: bash
      run: |
        MATRIX=".github/workflows/matrix.json"
        KEYS=$(jq -r ".include[0] | keys[] | select(. != \"VERSION\")" "${MATRIX}" | tr -d '\r')
        for KEY IN ${KEYS[@]}; do
          echo "KEY: ${KEY}"
        done
        
        # declare -A KEY_FILTERS
        # for KEY in ${KEYS[@]}; do
        #   KEY_FILTERS[${KEY}]=".include[] | select(.VERSION == \"${{ inputs.VERSION }}\") | .${KEY}"
        # done
        # for KEY in ${!KEY_FILTERS[@]}; do
        #   FILTER="${KEY_FILTERS[${KEY}]}"
        #   VALUE=$(jq -r "${FILTER}" "${MATRIX}" | tr -d '\r')
        #   if [ "${VALUE}" = "null" ]; then VALUE=""; fi
        #   echo "${KEY}=${VALUE}" >> ${GITHUB_OUTPUT}
        #   echo "${KEY}: ${VALUE}"
        # done

      # run: |
      #   MATRIX=".github/workflows/matrix.json"
      #   KEYS=$(jq -r ".include[0] | keys[] | select(. != \"VERSION\")" "${MATRIX}" | tr -d '\r')
      #   declare -A KEY_FILTERS
      #   for KEY in ${KEYS[@]}; do
      #     KEY_FILTERS[${KEY}]=".include[] | select(.VERSION == \"${{ inputs.VERSION }}\") | .${KEY}"
      #   done
      #   for KEY in ${!KEY_FILTERS[@]}; do
      #     FILTER="${KEY_FILTERS[${KEY}]}"
      #     VALUE=$(jq -r "${FILTER}" "${MATRIX}" | tr -d '\r')
      #     if [ "${VALUE}" = "null" ]; then VALUE=""; fi
      #     echo "${KEY}=${VALUE}" >> ${GITHUB_OUTPUT}
      #     echo "${KEY}: ${VALUE}"
      #   done
