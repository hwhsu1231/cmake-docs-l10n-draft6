# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-other-caches-from-versions

description: Get Other Caches from versions.json

inputs:
  version:
    required: true
    description: xxx
  versions-file:
    required: true
    description: xxx
  workspace:
    required: false
    description: xxx
    default: '${{ github.workspace }}'

outputs:
  VERSION_COMPENDIUM:
    value: ${{ steps.gocv.outputs.VERSION_COMPENDIUM }}
    description: xxx
  VERSION_OF_PYTHON:
    value: ${{ steps.gocv.outputs.VERSION_OF_PYTHON }}
    description: xxx
  VERSION_OF_SPHINX:
    value: ${{ steps.gocv.outputs.VERSION_OF_SPHINX }}
    description: xxx
  VERSION_OF_DOXYGEN:
    value: ${{ steps.gocv.outputs.VERSION_OF_DOXYGEN }}
    description: xxx
  VERSION_OF_PROJ:
    value: ${{ steps.gocv.outputs.VERSION_OF_PROJ }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Get the Version Group from versions.json
      id: gvgv
      uses: ./.github/actions/get-version-group-from-versions
      with:
        version: ${{ inputs.version }}
        versions-file: ${{ inputs.versions-file }}
        workspace: ${{ inputs.workspace }}

    - name: Get Other Caches from versions.json
      id: gocv
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        VERSION_GROUP="${{ steps.gvgv.outputs.VERSION_GROUP }}"
        VERSIONS_FILE=$(echo "${{ inputs.versions-file }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')
        WORKSPACE=$(echo "${{ inputs.workspace }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd ${WORKSPACE}

        CACHE_VERSIONS=(
          "VERSION_COMPENDIUM"
          "VERSION_OF_PYTHON"
          "VERSION_OF_SPHINX"
          "VERSION_OF_DOXYGEN"
          "VERSION_OF_PROJ"
        )

        # Initialize all output variables with the default value
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "${CACHE_VERSION}='[default]'"
        done

        # Read actual values from versions.json
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          FILTER=".${VERSION_GROUP}[] | select(.VERSION == \"${VERSION}\") | .${CACHE_VERSION}"
          VALUE=$(jq -r "${FILTER}" "${VERSIONS_FILE}")
          if [ "${VALUE}" != "null" ]; then
            eval "${CACHE_VERSION}='${VALUE}'"
          fi
        done

        # Set GitHub Actions outputs
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "echo ${CACHE_VERSION}: \$$CACHE_VERSION"
          eval "echo ${CACHE_VERSION}=\$${CACHE_VERSION} >> ${GITHUB_OUTPUT}"
        done
