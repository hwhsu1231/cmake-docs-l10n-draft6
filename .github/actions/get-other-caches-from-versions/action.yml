# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-other-caches-from-verions

description: Get Other Caches from versions.json

inputs:
  version:
    required: true
    description: xxx
  versions-file:
    required: true
    description: xxx
  workspace:
    required: false
    description: xxx
    default: '${{ github.workspace }}'

outputs:
  VERSION_COMPENDIUM:
    value: ${{ steps.gocv.outputs.VERSION_COMPENDIUM }}
    description: xxx
  VERSION_EXACT_PYTHON:
    value: ${{ steps.gocv.outputs.VERSION_EXACT_PYTHON }}
    description: xxx
  VERSION_EXACT_SPHINX:
    value: ${{ steps.gocv.outputs.VERSION_EXACT_SPHINX }}
    description: xxx
  VERSION_EXACT_DOXYGEN:
    value: ${{ steps.gocv.outputs.VERSION_EXACT_DOXYGEN }}
    description: xxx
  VERSION_EXACT_PROJ:
    value: ${{ steps.gocv.outputs.VERSION_EXACT_PROJ }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Get the Version Group from versions.json
      id: gvgv
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        VERSIONS_FILE=$(echo "${{ inputs.versions-file }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')
        WORKSPACE=$(echo "${{ inputs.workspace }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd ${WORKSPACE}

        VERSION_GROUPS=($(jq -r 'keys[]' "${VERSIONS_FILE}" | tr -d '\r'))
        FOUND_GROUP=""
        for VERSION_GROUP in ${VERSION_GROUPS[@]}; do
          FILTER="[.${VERSION_GROUP}[] | select(.VERSION == \"${VERSION}\")] | length"
          IS_IN_GROUP=$(jq "${FILTER}" "${VERSIONS_FILE}" | tr -d '\r')
          if [ "$IS_IN_GROUP" -gt 0 ]; then
            FOUND_GROUP="${VERSION_GROUP}"
            break
          fi
        done

        if [ -n "${FOUND_GROUP}" ]; then
          echo "${VERSION} is in ${FOUND_GROUP}"
        else
          echo "${VERSION} is not found in any group"
        fi

        echo "VERSION_GROUP=${FOUND_GROUP}" >> ${GITHUB_OUTPUT}

    - name: Get Other Caches from versions.json
      id: gocv
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        VERSION_GROUP="${{ steps.gvgv.outputs.VERSION_GROUP }}"
        VERSIONS_FILE=$(echo "${{ inputs.versions-file }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')
        WORKSPACE=$(echo "${{ inputs.workspace }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd ${WORKSPACE}

        CACHE_VERSIONS=(
          "VERSION_COMPENDIUM"
          "VERSION_EXACT_PYTHON"
          "VERSION_EXACT_SPHINX"
          "VERSION_EXACT_DOXYGEN"
          "VERSION_EXACT_PROJ"
        )

        # Initialize all output variables with the default value
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "${CACHE_VERSION}='[default]'"
        done

        # Read actual values from versions.json
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          FILTER=".${VERSION_GROUP}[] | select(.VERSION == \"${VERSION}\") | .${CACHE_VERSION}"
          VALUE=$(jq -r "${FILTER}" "${VERSIONS_FILE}")
          if [ "${VALUE}" != "null" ]; then
            eval "${CACHE_VERSION}='${VALUE}'"
          fi
        done

        # Set GitHub Actions outputs
        for CACHE_VERSION in "${CACHE_VERSIONS[@]}"; do
          eval "echo ${CACHE_VERSION}: \$$CACHE_VERSION"
          eval "echo ${CACHE_VERSION}=\$${CACHE_VERSION} >> ${GITHUB_OUTPUT}"
        done
