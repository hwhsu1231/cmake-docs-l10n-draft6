# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: ci-deploy-gh-pages

on:
  schedule:
    - cron: '0 8 1,15 * *'  # Runs at 08:00 on day 1 and 15 of the month in UTC zone
  workflow_dispatch:
    inputs:
      TYPE:
        description: 'TYPE input'
        required: true
        type: choice
        default: 'matrix'
        options:
          - 'matrix'
          - 'single'
      VERSION:
        description: 'VERSION input (for single type)'
        required: true
        type: string
        default: 'git-master'
      LANGUAGE:
        description: 'LANGUAGE input (for single type)'
        required: true
        type: string
        default: 'all'
      VERSION_GROUP:
        description: 'VERSION_GROUP input (for matrix type)'
        required: true
        type: choice
        default: 'v3'
        options:
          - 'v3'
      DEPLOY_ONLY:
        description: 'DEPLOY_ONLY input'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'

env:
  CRON_V3: '0 8 1,15 * *'

jobs:
  precondition:
    runs-on: ubuntu-latest
    steps:
      - name: Check Secrets
        shell: bash
        run: |
          SECRETS_EXIST=true
          if [ -z "${{ secrets.ACTOR_GITHUB_TOKEN }}" ]; then
            echo "secrets.ACTOR_GITHUB_TOKEN is missing."
            SECRETS_EXIST=false
          fi
          if [ "$SECRETS_EXIST" = "false" ]; then
            exit 1
          fi
      - name: Check Variables
        shell: bash
        run: |
          VARIABLES_EXIST=true
          if [ -z "${{ vars.ACTOR_ID }}" ]; then
            echo "vars.ACTOR_ID is missing."
            VARIABLES_EXIST=false
          fi
          if [ -z "${{ vars.ACTOR_NAME }}" ]; then
            echo "vars.ACTOR_NAME is missing."
            VARIABLES_EXIST=false
          fi
          if [ -z "${{ vars.ACTOR_LOGIN }}" ]; then
            echo "vars.ACTOR_LOGIN is missing."
            VARIABLES_EXIST=false
          fi
          if [ "$VARIABLES_EXIST" = "false" ]; then
            exit 1
          fi

  get-matrix:
    if: inputs.DEPLOY_ONLY == 'false' &&
        ( ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'matrix' ) ||
          ( github.event_name == 'schedule' ) )
    runs-on: ubuntu-latest
    outputs:
      VERSION_LIST: ${{ steps.gvl.outputs.VERSION_LIST }}
      LANGUAGE_LIST: ${{ steps.gll.outputs.LANGUAGE_LIST }}
    steps:
      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Get VERSION_GROUP from Inputs or Schedule
        id: gvg
        shell: bash
        run: |
          INPUTS_VERSION_GROUP="${{ inputs.VERSION_GROUP }}"
          GITHUB_EVENT_NAME="${{ github.event_name }}"
          GITHUB_EVENT_SCHEDULE="${{ github.event.schedule }}"
          if [[ ${GITHUB_EVENT_NAME} == "workflow_dispatch" ]]; then
            VERSION_GROUP="${INPUTS_VERSION_GROUP}"
          elif [[ ${GITHUB_EVENT_NAME} == "schedule" ]]; then
            if [[ ${GITHUB_EVENT_SCHEDULE} == "${{ env.CRON_V3 }}" ]]; then
              VERSION_GROUP="v3"
            fi
          fi
          echo "VERSION_GROUP=${VERSION_GROUP}" >> ${GITHUB_OUTPUT}
      - name: Get VERSION_LIST from versions.json
        id: gvl
        run: |
          VERSION_GROUP=${{ steps.gvg.outputs.VERSION_GROUP }}
          JQ_FILE="versions.json"
          JQ_FILTER=".${VERSION_GROUP} | map(.VERSION)"
          VERSION_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          echo "VERSION_LIST=${VERSION_LIST}" >> ${GITHUB_OUTPUT}
          echo "VERSION_LIST:"
          echo "${VERSION_LIST}" | jq "."
      - name: Get LANGUAGE_LIST from languages.json
        id: gll
        run: |
          JQ_FILE="languages.json"
          JQ_FILTER="keys"
          LANGUAGE_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          echo "LANGUAGE_LIST=${LANGUAGE_LIST}" >> ${GITHUB_OUTPUT}
          echo "LANGUAGE_LIST:"
          echo "${LANGUAGE_LIST}" | jq "."

  matrix:
    needs: [ 'precondition', 'get-matrix' ]
    if: inputs.DEPLOY_ONLY == 'false' &&
        ( ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'matrix' ) || 
          ( github.event_name == 'schedule' ) )
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.VERSION }}-${{ matrix.LANGUAGE }}
      cancel-in-progress: true
    strategy:
      matrix: 
        VERSION: ${{ fromJSON(needs.get-matrix.outputs.VERSION_LIST) }}
        LANGUAGE: [ 'all' ]
      fail-fast: false
    uses: ./.github/workflows/use-deploy-gh-pages.yml
    with:
      RUNNER: 'ubuntu-latest'
      CHECKOUT: ${{ github.ref }}
      VERSION: ${{ matrix.VERSION }}
      LANGUAGE: ${{ matrix.LANGUAGE }}
      MODE_OF_UPDATE: 'NEVER'
      CALLER_JOB: 'matrix (${{ matrix.VERSION }}, ${{ matrix.LANGUAGE }})'
      ENABLE_JOB: true
      DEPLOY_HTML: true
      ACTOR_ID: ${{ vars.ACTOR_ID }}
      ACTOR_NAME: ${{ vars.ACTOR_NAME }}
      ACTOR_LOGIN: ${{ vars.ACTOR_LOGIN }}
    secrets:
      ACTOR_GITHUB_TOKEN: ${{ secrets.ACTOR_GITHUB_TOKEN }}

  single:
    needs: [ 'precondition' ]
    if: inputs.DEPLOY_ONLY == 'false' &&
        ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'single' )
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.VERSION }}-${{ inputs.LANGUAGE }}
      cancel-in-progress: true
    uses: ./.github/workflows/use-deploy-gh-pages.yml
    with:
      RUNNER: 'ubuntu-latest'
      CHECKOUT: ${{ github.ref }}
      VERSION: ${{ inputs.VERSION }}
      LANGUAGE: ${{ inputs.LANGUAGE }}
      MODE_OF_UPDATE: 'NEVER'
      CALLER_JOB: 'single'
      ENABLE_JOB: true
      DEPLOY_HTML: true
      ACTOR_ID: ${{ vars.ACTOR_ID }}
      ACTOR_NAME: ${{ vars.ACTOR_NAME }}
      ACTOR_LOGIN: ${{ vars.ACTOR_LOGIN }}
    secrets:
      ACTOR_GITHUB_TOKEN: ${{ secrets.ACTOR_GITHUB_TOKEN }}

  deploy:
    needs: [ 'matrix', 'single' ]
    if: always()
    # if: always() && ( needs.matrix.result == 'success' || needs.single.result == 'success' )
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout to 'refs/heads/gh-pages'
        uses: actions/checkout@v4
        with:
          ref: 'refs/heads/gh-pages'
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.ACTOR_GITHUB_TOKEN }}

  # # Single deploy job since we're just deploying
  # deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v5
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         # Upload entire repository
  #         path: '.'
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
