# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: use-sphinx-update-pot

on:
  workflow_call:
    inputs:
      VERSION:
        type: string
        required: true
      LANGUAGE:
        type: string
        required: true
      UPDATE_MODE:
        type: string
        required: true
      CALLER_JOB:
        type: string
        required: true
      ENABLE_JOB:
        type: boolean
        required: true
      CREATE_PR:
        type: boolean
        required: true

jobs:
  sphinx-update-pot:
    #  Don't run on forked repos.
    if: (inputs.ENABLE_JOB && github.repository_owner == 'hwhsu1231')
    runs-on: ubuntu-latest
    steps:
      - name: Check Contexts, Inputs, and Secrets
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event.action = ${{ github.event.action }}"
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "[Inputs]"
          echo "inputs.VERSION = ${{ inputs.VERSION }}"
          echo "inputs.LANGUAGE = ${{ inputs.LANGUAGE }}"
          echo "inputs.UPDATE_MODE = ${{ inputs.UPDATE_MODE }}"
          echo "inputs.CALLER_JOB = ${{ inputs.CALLER_JOB }}"
          echo "inputs.ENABLE_JOB = ${{ inputs.ENABLE_JOB }}"
          echo "inputs.CREATE_PR = ${{ inputs.CREATE_PR }}"
          echo "[Secrets]"
          echo "secrets.APP_ID = ${{ secrets.APP_ID }}"
          echo "secrets.APP_PRIVATE_KEY = ${{ secrets.APP_PRIVATE_KEY }}"

      - name: Get the GitHub App's Token
        uses: tibdex/github-app-token@v2
        id: ggat
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ steps.ggat.outputs.token }}
          submodules: true

      - name: Get Other Fields from matrix.json
        id: gofm
        shell: bash
        run: |
          MATRIX=".github/workflows/matrix.json"
          KEYS=$(jq -r ".include[0] | keys[] | select(. != \"VERSION\")" "${MATRIX}" | tr -d '\r')
          declare -A KEY_FILTERS
          for KEY in ${KEYS[@]}; do
            KEY_FILTERS[${KEY}]=".include[] | select(.VERSION == \"${{ inputs.VERSION }}\") | .${KEY}"
          done
          for KEY in ${!KEY_FILTERS[@]}; do
            FILTER="${KEY_FILTERS[${KEY}]}"
            VALUE=$(jq -r "${FILTER}" "${MATRIX}" | tr -d '\r')
            if [ "${VALUE}" = "null" ]; then VALUE=""; fi
            echo "${KEY}=${VALUE}" >> ${GITHUB_OUTPUT}
            echo "${KEY}: ${VALUE}"
          done

      - name: Install CMake 3.23
        uses: ./.github/actions/install-cmake
        with:
          cmake-version: '3.23'

      - name: Install Conda
        uses: ./.github/actions/install-conda

      - name: Install Gettext
        uses: ./.github/actions/install-gettext

      - name: Configure with '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
        uses: ./.github/actions/cmake-configure-preset
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          cache-version: ${{ inputs.VERSION }}
          cache-update-mode: ${{ inputs.UPDATE_MODE }}
          cache-auto-depend: 'OFF'
          cache-version-exact-git: ${{ steps.gofm.outputs.VERSION_EXACT_GIT }}
          cache-version-exact-conda: ${{ steps.gofm.outputs.VERSION_EXACT_CONDA }}
          cache-version-exact-python: ${{ steps.gofm.outputs.VERSION_EXACT_PYTHON }}
          cache-version-exact-gettext: ${{ steps.gofm.outputs.VERSION_EXACT_GETTEXT }}

      - name: Get the Version Information of '.pot' Before Building
        id: pot-before
        uses: ./.github/actions/get-version-info-from-reference
        with:
          jq-filter: '.pot'
          jq-file: '${{ github.workspace }}/l10n/${{ inputs.VERSION }}/reference.json'

      - name: Build the 'prepare_repositories' target
        uses: ./.github/actions/cmake-build-target
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          target: 'prepare_repositories'

      - name: Build the 'install_requirements' target
        uses: ./.github/actions/cmake-build-target
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          target: 'install_requirements'

      - name: Build the 'sphinx_update_pot' target
        uses: ./.github/actions/cmake-build-target
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          target: 'sphinx_update_pot'

      - name: Get the Version Information of '.pot' After Building
        id: pot-after
        uses: ./.github/actions/get-version-info-from-reference
        with:
          jq-filter: '.pot'
          jq-file: '${{ github.workspace }}/l10n/${{ inputs.VERSION }}/reference.json'

      - name: Set the Label List for the Pull Request
        id: sllpr
        shell: bash
        run: |
          VERSION="${{ inputs.VERSION }}"
          FILTER=".include | map(select(.VERSION_COMPENDIUM == null)) | .[].VERSION"
          OUTPUT=$(jq -r "${FILTER}" .github/workflows/matrix.json)
          readarray -t CROWDIN_BRANCHES <<< "${OUTPUT}"
          PULL_REQUEST_LABEL_LIST="gettext"
          for CROWDIN_BRANCH in "${CROWDIN_BRANCHES[@]}"; do
            if [ "${VERSION}" == "${CROWDIN_BRANCH}" ]; then
              PULL_REQUEST_LABEL_LIST="${PULL_REQUEST_LABEL_LIST},crowdin"
              break
            fi
          done
          echo "PULL_REQUEST_LABEL_LIST: ${PULL_REQUEST_LABEL_LIST}"
          echo "PULL_REQUEST_LABEL_LIST=${PULL_REQUEST_LABEL_LIST}" >> $GITHUB_OUTPUT

      - name: Get the Current Job's ID
        id: gcji
        uses: Tiryoh/gha-jobid-action@v1
        with:
          github_token: ${{ steps.ggat.outputs.token }}
          job_name: '${{ inputs.CALLER_JOB }} / ${{ github.job }}'
          per_page: 100

      - name: Check Outputs of the Current Job's ID
        shell: bash
        run: |
          echo "Current Job's URL = ${{ steps.gcji.outputs.html_url }}"
          echo "Current Job's ID  = ${{ steps.gcji.outputs.job_id }}"

      - name: Set up mutex for 'l10n' branch
        uses: ben-z/gh-action-mutex@v1.0.0-alpha.9
        with:
          branch: mutex/l10n
          repo-token: ${{ steps.ggat.outputs.token }}

      - name: Add and Commit the Change
        id: acc
        if: inputs.CREATE_PR
        uses: EndBug/add-and-commit@v9
        with:
          cwd: ./l10n
          add: ./${{ inputs.VERSION }}
          push: 'origin sphinx/pot/${{ inputs.VERSION }} --set-upstream --force'
          new_branch: sphinx/pot/${{ inputs.VERSION }}
          author_name: docs-l10n[bot]
          author_email: 157310748+docs-l10n[bot]@users.noreply.github.com
          message: |
            pot(${{ inputs.VERSION }}): Update pot from Sphinx

            Before: ${{ steps.pot-before.outputs.VERSION_INFO }}
            After: ${{ steps.pot-after.outputs.VERSION_INFO }}

      - name: Check Outputs of the Commit
        if: inputs.CREATE_PR && steps.acc.outputs.committed == 'true'
        shell: bash
        run: |
          echo "Commit's SHA = ${{ steps.acc.outputs.commit_long_sha }}"
          echo "Commit's URL = ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.acc.outputs.commit_long_sha }}"

      - name: Create a Pull Request
        id: cpr
        if: inputs.CREATE_PR && steps.acc.outputs.committed == 'true'
        uses: devops-infra/action-pull-request@v0.5.5
        with:
          github_token: ${{ steps.ggat.outputs.token }}  # required
          source_branch: sphinx/pot/${{ inputs.VERSION }}
          target_branch: l10n
          label: ${{ steps.sllpr.outputs.PULL_REQUEST_LABEL_LIST }}
          title: |
            pot(${{ inputs.VERSION }}): Update pot from Sphinx
          body: |
            Created by GitHub Workflows:
            - File: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ github.workflow }}.yml)
            - Run: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Job: [${{ inputs.CALLER_JOB }} / ${{ github.job }}](${{ steps.gcji.outputs.html_url }})

      - name: Check Outputs of the Pull Request
        if: inputs.CREATE_PR && steps.acc.outputs.committed == 'true'
        shell: bash
        run: |
          echo "Pull Request's Number = ${{ steps.cpr.outputs.pr_number }}"
          echo "Pull Request's URL    = ${{ steps.cpr.outputs.url }}"

      # - name: Checkout to 'refs/heads/l10n'
      #   if: inputs.CREATE_PR
      #   uses: actions/checkout@v4
      #   with:
      #     ref: 'refs/heads/l10n'
      #     token: ${{ steps.ggat.outputs.token }}
      #     clean: true

      # - name: Create a Pull Request
      #   id: cpr
      #   if: inputs.CREATE_PR
      #   uses: peter-evans/create-pull-request@v6
      #   with:
      #     token: ${{ steps.ggat.outputs.token }}  # required
      #     path: '.'
      #     base: 'l10n'
      #     branch: 'sphinx/pot/${{ inputs.VERSION }}'
      #     delete-branch: true   # Delete the branch if no need to create a PR
      #     author: docs-l10n[bot] <157310748+docs-l10n[bot]@users.noreply.github.com>
      #     title: |
      #       pot(${{ inputs.VERSION }}): Update pot from Sphinx
      #     body: |
      #       Created by GitHub Workflows:
      #       - File: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ github.workflow }}.yml)
      #       - Run: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      #       - Job: [${{ inputs.CALLER_JOB }} / ${{ github.job }}](${{ steps.gcji.outputs.html_url }})
      #     commit-message: |
      #       pot(${{ inputs.VERSION }}): Update pot from Sphinx

      #       Before: ${{ steps.pot-before.outputs.POT_BEFORE }}
      #       After: ${{ steps.pot-after.outputs.POT_AFTER }}
      #     draft: false
      #     labels: |
      #       gettext
      #       ${{ steps.sllpr.outputs.CROWDIN_LABEL }}

      # - name: Check Outputs of the Pull Request
      #   if: steps.cpr.outputs.pull-request-number
      #   run: |
      #     echo "Pull Request Number = ${{ steps.cpr.outputs.pull-request-number }}"
      #     echo "Pull Request URL    = ${{ steps.cpr.outputs.pull-request-url }}"

      # - name: Print job info
      #   run: |
      #     echo "### ${{ inputs.CALLER_JOB }} / ${{ github.job }}"  >> $GITHUB_STEP_SUMMARY
      #     echo "| Key        | Value           |" >> $GITHUB_STEP_SUMMARY
      #     echo "| ---------- | --------------- |" >> $GITHUB_STEP_SUMMARY
      #     echo "| Job Name   | Job 2           |" >> $GITHUB_STEP_SUMMARY
      #     echo "| Status     | Success         |" >> $GITHUB_STEP_SUMMARY
      #     echo ""                                 >> $GITHUB_STEP_SUMMARY
