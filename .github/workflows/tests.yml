# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: tests

on:
  # push:
  #   branches: 
  #     - 'source'
  #   paths:
  #     - '.github/actions/cmake-configure/action.yml'
  #     - '.github/workflows/tests.yml'
  workflow_dispatch:
    inputs:
      LANGUAGE:
        type: string
        default: 'all'
        description: xxx
        required: true
      VERSION:
        type: string
        default: 'git-master'
        description: yyy
        required: true

jobs:
  single:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - 'windows-latest'
          - 'macos-latest'
          - 'ubuntu-latest'
      fail-fast: false
    steps:
      - name: Check Contexts, Inputs, and Secrets
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event.action = ${{ github.event.action }}"
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "[Inputs]"
          echo "inputs.CHECKOUT = ${{ inputs.CHECKOUT }}"
          echo "inputs.VERSION = ${{ inputs.VERSION }}"
          echo "inputs.LANGUAGE = ${{ inputs.LANGUAGE }}"
          echo "inputs.UPDATE_MODE = ${{ inputs.UPDATE_MODE }}"
          echo "inputs.CALLER_JOB = ${{ inputs.CALLER_JOB }}"
          echo "inputs.ENABLE_JOB = ${{ inputs.ENABLE_JOB }}"
          echo "[Secrets]"
          echo "secrets.APP_ID = ${{ secrets.APP_ID }}"
          echo "secrets.APP_PRIVATE_KEY = ${{ secrets.APP_PRIVATE_KEY }}"
          echo "secrets.GH_PERSONAL_TOKEN = ${{ secrets.GH_PERSONAL_TOKEN }}"
          echo "secrets.CROWDIN_PERSONAL_TOKEN = ${{ secrets.CROWDIN_PERSONAL_TOKEN }}"

      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Check JQ version
        shell: bash
        run: |
          which jq
          jq --version

      - name: Install CMake
        uses: ./.github/actions/install-cmake
        with:
          cmake-version: '3.23'

      - name: Install Conda
        uses: ./.github/actions/install-conda

      - name: Install Gettext
        uses: ./.github/actions/install-gettext

      - name: Install Crowdin
        uses: ./.github/actions/install-crowdin

      - name: Set Environment Variables
        shell: bash
        run: |
          echo "CROWDIN_PERSONAL_TOKEN=${{ secrets.CROWDIN_PERSONAL_TOKEN }}" >> $GITHUB_ENV

      - name: Configure with '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
        shell: bash
        run: |
          cmake \
            --preset ${{ inputs.LANGUAGE }} \
            -D VERSION=${{ inputs.VERSION }} \
            -D AUTO_DEPEND=OFF

      - name: Get Version Information from reference.json
        uses: ./.github/actions/get-version-info-from-reference
        with:
          jq-filter: '.pot'
          jq-file: '${{ github.workspace }}/l10n/${{ inputs.VERSION }}/reference.json'

      # - name: Get the Crowdin Language List
      #   id: gcla
      #   uses: ./.github/actions/get-crowdin-language-list
      #   with:
      #     preset: 'all'

      # - name: Crowdin Upload Sources to the 'repo' Branch
      #   uses: ./.github/actions/crowdin-upload-sources
      #   with:
      #     crowdin-config-file: '${{ github.workspace }}/crowdin.yml'
      #     crowdin-branch-name: 'repo'
      #     crowdin-personal-token: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
      #     crowdin-verbose: 'true'
      #     crowdin-dryrun: 'true'

      - name: Crowdin Download Translations from the 'repo' Branch
        uses: ./.github/actions/crowdin-download-translations
        with:
          crowdin-config-file: '${{ github.workspace }}/crowdin.yml'
          crowdin-branch-name: 'repo'
          crowdin-personal-token: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          crowdin-language-list: 'ja,ru,zh-CN,zh-TW'
          crowdin-export-only-approved: 'true'
          crowdin-no-progress: 'true'
          crowdin-verbose: 'true'
          crowdin-dryrun: 'true'
        # shell: bash
        # run: |
        #   crowdin download \
        #     --dryrun \
        #     ${{ steps.scla.outputs.CROWDIN_LANGUAGE_ARGS }} \
        #     --branch ${{ inputs.VERSION }} \
        #     --export-only-approved \
        #     --no-progress \
        #     --verbose

      - name: Get the Crowdin Status Progress
        id: scsp
        uses: ./.github/actions/get-crowdin-status-progress
        with:
          crowdin-config-file: '${{ github.workspace }}/crowdin.yml'
          crowdin-branch-name: 'repo'
          crowdin-personal-token: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          crowdin-no-progress: true
          crowdin-verbose: true
        # shell: bash
        # run: |
        #   CROWDIN_YML_PATH=$(pwd)/crowdin.yml
        #   CROWDIN_STATUS_OUTPUT=$(crowdin status --branch=repo --config=$CROWDIN_YML_PATH --no-progress --verbose 2>&1)
        #   CROWDIN_STATUS_PROGRESS=$(echo "$CROWDIN_STATUS_OUTPUT" | sed '/Fetching project info/d' | sed 's/\t/  /g')
        #   delimiter="$(openssl rand -hex 8)"
        #   echo "CROWDIN_STATUS_PROGRESS<<$delimiter"  >> $GITHUB_OUTPUT
        #   echo "$CROWDIN_STATUS_PROGRESS"             >> $GITHUB_OUTPUT
        #   echo "$delimiter"                           >> $GITHUB_OUTPUT
        #   echo "CROWDIN_STATUS_PROGRESS:"
        #   echo "$CROWDIN_STATUS_PROGRESS"

      # # - name: Check whether CMake is installed
      # #   run: |
      # #     which cmake && cmake --version

      # - name: Configure the project
      #   uses: ./.github/actions/cmake-configure
      #   with:
      #     source-directory: '${{ github.workspace }}'
      #     preset: 'all'
      #     version: 'git-master'

      # - name: Build the 'prepare_repositories' target
      #   uses: ./.github/actions/cmake-build-target
      #   with:
      #     source-directory: '${{ github.workspace }}'
      #     language: 'all'
      #     target: 'prepare_repositories'

      # # - name: Check whether CMake is installed
      # #   run: |
      # #     which cmake && cmake --version

      # - name: Check whether Node.js is installed (for Windows)
      #   if: ${{ runner.os == 'Windows' }}
      #   shell: cmd
      #   run: |
      #     where node && node --version

      # - name: Check whether Node.js is installed (for Linux/macOS)
      #   if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      #   shell: bash
      #   run: |
      #     which node && node --version
