# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: ci-deploy-po-version

on:
  schedule:
    - cron: '0 8 1,15 * *'  # Runs at 08:00 on day 1 and 15 of the month in UTC zone
    - cron: '1 8 1,15 * *'  # Runs at 08:01 on day 1 and 15 of the month in UTC zone
    - cron: '2 8 1,15 * *'  # Runs at 08:02 on day 1 and 15 of the month in UTC zone
  workflow_dispatch:
    inputs:
      TYPE:
        description: 'Set TYPE input'
        required: true
        type: choice
        default: 'matrix'
        options:
          - 'matrix'
          - 'single'
      VERSION:
        description: 'Set VERSION input (for single type)'
        required: true
        type: string
        default: 'git-master'
      VERSION_GROUP:
        description: 'Set VERSION_GROUP input (for matrix type)'
        required: true
        type: choice
        default: 'include'
        options:
          - 'v3'
          - 'v4'
          - 'v5'

env:
  CRON_V3: '0 8 1,15 * *'
  CRON_V4: '1 8 1,15 * *'
  CRON_V5: '2 8 1,15 * *'

jobs:
  get-matrix:
    if: ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'matrix' ) ||
        ( github.event_name == 'schedule' )
    runs-on: ubuntu-latest
    outputs:
      VERSION_LIST: ${{ steps.rvm.outputs.VERSION_LIST }}
    steps:
      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Get VERSION_GROUP from Inputs or Schedule
        id: gvgis
        shell: bash
        run: |
          GITHUB_EVENT_NAME=${{ github.event_name }}
          GITHUB_EVENT_SCHEDULE=${{ github.event.schedule }}
          INPUTS_VERSION_GROUP=${{ inputs.VERSION_GROUP }}
          if [[ ${GITHUB_EVENT_NAME} == 'schedule' ]]; then
            if [[ ${GITHUB_EVENT_SCHEDULE} == "${{ env.CRON_V3 }}" ]]; then
              VERSION_GROUP=v3
            elif [[ ${GITHUB_EVENT_SCHEDULE} == "${{ env.CRON_V4 }}" ]]; then
              VERSION_GROUP=v4
            elif [[ ${GITHUB_EVENT_SCHEDULE} == "${{ env.CRON_V5 }}" ]]; then
              VERSION_GROUP=v5
            fi
          elif [[ ${GITHUB_EVENT_NAME} == 'workflow_dispatch' ]]; then
            VERSION_GROUP=${INPUTS_VERSION_GROUP}
          fi
          echo "VERSION_GROUP=${VERSION_GROUP}" >> ${GITHUB_OUTPUT}
      - name: Get VERSION_LIST from matrix.json
        id: rvm
        shell: bash
        run: |
          VERSION_GROUP=${{ steps.gvgis.outputs.VERSION_GROUP }}
          JQ_FILE=".github/workflows/versions.json"
          JQ_FILTER=".${VERSION_GROUP} | map(.VERSION)"
          VERSION_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          echo "VERSION_LIST=${VERSION_LIST}" >> ${GITHUB_OUTPUT}
          echo "VERSION_LIST:"
          echo "${VERSION_LIST}" | jq "."

  # matrix:
  #   needs: get-matrix
  #   if: ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'matrix' ) ||
  #       ( github.event_name == 'schedule' )
  #   secrets: inherit
  #   concurrency:
  #     group: ${{ github.workflow }}-${{ matrix.VERSION }}
  #     cancel-in-progress: true
  #   strategy:
  #     matrix: 
  #       VERSION: ${{ fromJSON(needs.get-matrix.outputs.VERSION_LIST) }}
  #     fail-fast: false
  #   uses: ./.github/workflows/use-deploy-po-version.yml
  #   with:
  #     RUNNER: 'ubuntu-latest'
  #     CHECKOUT: ${{ github.ref }}
  #     VERSION: ${{ matrix.VERSION }}
  #     CALLER_JOB: 'matrix (${{ matrix.VERSION }})'
  #     ENABLE_JOB: true

  # single:
  #   if: ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'single' )
  #   secrets: inherit
  #   concurrency:
  #     group: ${{ github.workflow }}-${{ inputs.VERSION }}
  #     cancel-in-progress: true
  #   uses: ./.github/workflows/use-deploy-po-version.yml
  #   with:
  #     RUNNER: 'ubuntu-latest'
  #     CHECKOUT: ${{ github.ref }}
  #     VERSION: ${{ inputs.VERSION }}
  #     CALLER_JOB: 'single'
  #     ENABLE_JOB: true
