# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: use-crowdin-download-po

on:
  workflow_call:
    inputs:
      RUNNER:
        type: string
        required: true
      CHECKOUT:
        type: string
        required: true
      VERSION:
        type: string
        required: true
      LANGUAGE:
        type: string
        required: true
      UPDATE_MODE:
        type: string
        required: true
      CALLER_JOB:
        type: string
        required: true
      ENABLE_JOB:
        type: boolean
        required: true

jobs:
  crowdin-download-po:
    if: inputs.ENABLE_JOB
    runs-on: ${{ inputs.RUNNER }}
    steps:
      - name: Check Contexts, Inputs, and Secrets
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event.action = ${{ github.event.action }}"
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "[Inputs]"
          echo "inputs.RUNNER = ${{ inputs.RUNNER }}"
          echo "inputs.CHECKOUT = ${{ inputs.CHECKOUT }}"
          echo "inputs.VERSION = ${{ inputs.VERSION }}"
          echo "inputs.LANGUAGE = ${{ inputs.LANGUAGE }}"
          echo "inputs.UPDATE_MODE = ${{ inputs.UPDATE_MODE }}"
          echo "inputs.CALLER_JOB = ${{ inputs.CALLER_JOB }}"
          echo "inputs.ENABLE_JOB = ${{ inputs.ENABLE_JOB }}"
          echo "[Secrets]"
          echo "secrets.APP_ID = ${{ secrets.APP_ID }}"
          echo "secrets.APP_PRIVATE_KEY = ${{ secrets.APP_PRIVATE_KEY }}"
          echo "secrets.CROWDIN_PERSONAL_TOKEN = ${{ secrets.CROWDIN_PERSONAL_TOKEN }}"

      - name: Get the GitHub App's Token
        id: ggat
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout to '${{ inputs.CHECKOUT }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.CHECKOUT }}
          token: ${{ steps.ggat.outputs.token }}
          submodules: true
          fetch-depth: 0

      - name: Set up Environment Variables
        shell: bash
        run: |
          echo "CROWDIN_PERSONAL_TOKEN=${{ secrets.CROWDIN_PERSONAL_TOKEN }}" >> ${GITHUB_ENV}

      - name: Get Other Fields from versions.json
        id: gofm
        shell: bash
        run: |
          get_keys() {
            jq -r ".v3[0] | keys[] | select(. != \"VERSION\")" .github/workflows/versions.json
          }
          declare -A VERSION_FILTERS
          for KEY in $(get_keys); do
            VERSION_FILTERS[$KEY]=".v3[] | select(.VERSION == \"${{ inputs.VERSION }}\") | .$KEY"
          done
          for KEY in "${!VERSION_FILTERS[@]}"; do
            FILTER="${VERSION_FILTERS[$KEY]}"
            VALUE=$(jq -r "${FILTER}" .github/workflows/versions.json)
            if [ "$VALUE" = "null" ]; then VALUE=""; fi
            echo "${KEY}=$VALUE" >> ${GITHUB_OUTPUT}
            echo "${KEY}: $VALUE"
          done

      - name: Install CMake
        uses: ./.github/actions/install-cmake
        with:
          cmake-version: '3.23'

      - name: Install Gettext
        uses: ./.github/actions/install-gettext

      - name: Install Crowdin
        uses: ./.github/actions/install-crowdin

      # - name: Configure with '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
      #   shell: bash
      #   run: |
      #     cmake \
      #       --preset ${{ inputs.LANGUAGE }} \
      #       -D VERSION=${{ inputs.VERSION }} \
      #       -D UPDATE_MODE=${{ inputs.UPDATE_MODE }} \
      #       -D AUTO_DEPEND=OFF
      - name: Configure with '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
        uses: ./.github/actions/cmake-configure-preset
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          cache-version: ${{ inputs.VERSION }}
          cache-update-mode: ${{ inputs.UPDATE_MODE }}
          cache-auto-depend: 'OFF'
          cache-version-exact-git: ${{ steps.gofm.outputs.VERSION_EXACT_GIT }}
          cache-version-exact-conda: ${{ steps.gofm.outputs.VERSION_EXACT_CONDA }}
          cache-version-exact-python: ${{ steps.gofm.outputs.VERSION_EXACT_PYTHON }}
          cache-version-exact-gettext: ${{ steps.gofm.outputs.VERSION_EXACT_GETTEXT }}

      - name: Build the 'gettext_update_po' target
        uses: ./.github/actions/cmake-build-target
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          target: 'gettext_update_po'

      - name: Build the 'crowdin_download_po' target
        uses: ./.github/actions/cmake-build-target
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          target: 'crowdin_download_po'

      # - name: Build with 'crowdin_status' target
      #   shell: bash
      #   run: |
      #     cmake \
      #       --build out/build/${{ inputs.LANGUAGE }} \
      #       --target crowdin_status

      # - name: Get the Translated/Proofread Progress
      #   id: gtpp
      #   run: |
      #     PROGRESS_CROWDIN_TXT_PATH=$(pwd)/l10n/${{ inputs.VERSION }}/progress.txt
      #     delimiter="$(openssl rand -hex 8)"
      #     echo "PROGRESS_OUTPUT<<$delimiter"    >> ${GITHUB_OUTPUT}
      #     echo "$(<$PROGRESS_CROWDIN_TXT_PATH)" >> ${GITHUB_OUTPUT}
      #     echo "$delimiter"                     >> ${GITHUB_OUTPUT}
      # - name: Get the Translated/Proofread Progress
      #   id: gtpp
      #   shell: bash
      #   run: |
      #     CROWDIN_YML_PATH=$(pwd)/l10n/${{ inputs.VERSION }}/crowdin.yml
      #     CROWDIN_STATUS_OUTPUT=$(crowdin status --branch=repo --config=$CROWDIN_YML_PATH --no-progress --verbose 2>&1)
      #     PROGRESS_OUTPUT=$(echo "$CROWDIN_STATUS_OUTPUT" | sed '/Fetching project info/d' | sed 's/\t/  /g')
      #     delimiter="$(openssl rand -hex 8)"
      #     echo "PROGRESS_OUTPUT<<$delimiter"  >> ${GITHUB_OUTPUT}
      #     echo "$PROGRESS_OUTPUT"             >> ${GITHUB_OUTPUT}
      #     echo "$delimiter"                   >> ${GITHUB_OUTPUT}
      #     echo "PROGRESS_OUTPUT:"
      #     echo "$PROGRESS_OUTPUT"
      - name: Get the Translated/Proofread Progress from Crowdin
        id: gtpp
        uses: ./.github/actions/get-crowdin-status-progress
        with:
          crowdin-config-file: 'l10n/${{ inputs.VERSION }}/crowdin.yml'
          crowdin-branch-name: ${{ inputs.VERSION }}
          crowdin-personal-token: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          # crowdin-no-progress: true
          # crowdin-verbose: true

      - name: Build the 'gettext_statistic_po' target
        uses: ./.github/actions/cmake-build-target
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          target: 'gettext_statistic_po'

      - name: Get the Current Job's ID
        id: gcji
        uses: Tiryoh/gha-jobid-action@v1
        with:
          github_token: ${{ steps.ggat.outputs.token }}
          job_name: '${{ inputs.CALLER_JOB }} / ${{ github.job }}'
          per_page: 100

      - name: Set up mutex for 'l10n' branch
        uses: ben-z/gh-action-mutex@v1.0.0-alpha.9
        with:
          branch: mutex/l10n
          repo-token: ${{ steps.ggat.outputs.token }}

      - name: Add and Commit Changes
        id: acc
        uses: EndBug/add-and-commit@v9
        with:
          cwd: './l10n'
          add: './${{ inputs.VERSION }}'
          pull: '--rebase --autostash'  # required 'actions/checkout' with 'fetch-depth: 0'
          author_name: docs-l10n[bot]
          author_email: 157310748+docs-l10n[bot]@users.noreply.github.com
          message: |
            tr(${{ inputs.VERSION }}): Download ${{ inputs.LANGUAGE }} Translations from Crowdin

            ${{ steps.gtpp.outputs.PROGRESS_OUTPUT }}

            Created by GitHub Workflows:
            - File: ${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ github.workflow }}.yml
            - Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Job: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ steps.gcji.outputs.job_id }}

      - name: Check Outputs of the Commit
        if: steps.acc.outputs.committed == 'true'
        shell: bash
        run: |
          echo "Commit's URL = ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.acc.outputs.commit_long_sha }}"
          echo "Commit's SHA = ${{ steps.acc.outputs.commit_long_sha }}"
